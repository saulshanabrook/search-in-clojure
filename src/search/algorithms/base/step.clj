(ns search.algorithms.base.step
  (:require [schema.core :as s]
            [com.rpl.specter :as sp]

            [search.algorithms.base.core :refer [Step]]
            [search.schemas :as schemas]
            [search.utils :as utils]))

(def Breed (s/=> [schemas/Individual] schemas/Generation))

(s/defn breed-> :- Step
  "Creates a step function, filling it with `population-size` new individuals
  generated by calling `breed` on the existing ones."
  [population-size :- s/Int
   breed :- Breed]
  (s/fn breed->-inner :- schemas/Generation
    [generation :- schemas/Generation]
    {:index (inc (:index generation))
     :run-id (:run-id generation)
     :individuals (take population-size (breed generation))}))


(def Select "Select should return a possible parent from a list of individuals"
 (s/=> schemas/Individual [schemas/Individual]))

(def Tweak
 "Represents a function that accepts a sequence of new parents and returns
 the children it creates"
 (s/=> [schemas/Individual] [schemas/Individual]))


(s/defn select-and-tweak->breed :- Breed
  "Creates an infinite lazy sequence of children by repeatedly calling `tweak`
  on a lazy sequence of parents generated by `select`."
  [select :- Select
   tweak :- Tweak]
  (s/fn select-and-tweak->breed-inner ;- lazy infinite [schemas/Individual]
    [{:keys [individuals]} :- schemas/Generation]
    (let [->parents (partial select individuals)]
      (flatten (repeatedly #(tweak (->parents)))))))
