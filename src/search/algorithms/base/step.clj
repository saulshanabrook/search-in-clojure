(ns search.algorithms.base.step
  (:require [schema.core :as s]
            [com.rpl.specter :as sp]

            [search.algorithms.base.schemas :refer [Step]]
            [search.schemas :as schemas]
            [search.utils :as utils]))

(def Breed (s/=> schemas/Individual [schemas/Individual]))
(s/defn breed-> :- Step
  "Creates a step function, fillin it with `population-size` new individuals
  generated by calling `breed` on the existing ones."
  [population-size :- s/Int
   breed :- Breed]
  (s/fn breed->-inner :- schemas/Generation
    [generation :- schemas/Generation]
    (->>
      generation
      (sp/transform [:index] inc)
      (sp/transform [:individuals] #(repeatedly population-size (partial breed %))))))

(def Select "Select should return a possible parent from a list of individuals"
  (s/=> schemas/Individual [schemas/Individual]))
(def Tweak
  "Represents a function that is called with some number of parents to return
   a child"
  {:n-parents s/Int :fn (s/=> schemas/Genome)})

(s/defn ->child-individual :- schemas/Individual
  [child-genome :- schemas/Genome
   parents :- [schemas/Individual]]
  {:id (utils/id)
   :genome child-genome
   :parents-ids (map :id parents)
   :traits {}})

(s/defn select-and-tweak->breed :- Breed
  "Creates a breed function for the common scenario where the new individual
  is created by tweaking two parent genomes."
  [select :- Select
   tweak :- Tweak]
  (s/fn select-and-tweak->breed :- schemas/Individual
    [individuals :- [schemas/Individual]]
    (let [parents (repeatedly (:n-parents tweak) (partial select individuals))]
      (->child-individual (apply (:fn tweak) (map :genome parents)) parents))))
