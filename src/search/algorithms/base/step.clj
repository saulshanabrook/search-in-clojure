(ns search.algorithms.base.step
  (:require [schema.core :as s]

            [search.utils :refer [defnk-fn]]
            [search.core :as search]))

(defnk-fn breed-> :- search/Generation
  "Step to the next generation by taking the first `n` individuals from calling
  `breed` on the current generation."
  [n :- s/Int
   breed :- (s/=> [search/Individual] search/Generation)]
  [generation :- search/Generation]
  {:index       (inc (:index generation))
   :run-id      (:run-id generation)
   :individuals (take n (breed generation))})

(defnk-fn select-and-tweak :- s/Any ;- lazy infinite [search/Individual]
  "Returns a list of possible offspring, repeatedly calling `tweak` on a
  lazy sequence of parents generated by `select`.

  Select should return a possible parent from a list of individuals.

  Tweak should return a sequence of children from a sequence of parents."
  [select :- (s/=> search/Individual [search/Individual])
   tweak :- (s/=> [search/Individual] [search/Individual])]
  [{individuals :individuals} :- search/Generation]
  (let [->parents (partial select individuals)]
    (flatten (repeatedly #(tweak (->parents))))))
